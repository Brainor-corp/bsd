<?php

namespace App\Admin\Sections;

use App\CmsBoosterPost;
use App\Terminal;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Zeus\Admin\Cms\Models\ZeusAdminTerm;
use Zeus\Admin\Cms\Sections\ZeusAdminPosts;
use Zeus\Admin\SectionBuilder\Form\Panel\Fields\BaseField\FormField;

class News extends ZeusAdminPosts
{
    protected $title = 'Новости';
    protected $model = 'App\\CmsBoosterPost';

    protected $checkAccess = true;

    public static function onDisplay()
    {
        $display = parent::onDisplay();
        $columns = $display->getColumns();
        unset($columns['0.04']);

        $display->setColumns($columns);

        $user = Auth::user();
        if($user->hasRole('regionalnyy-menedzher')) {
            $display->setScopes([
                'regionalManager'
            ]);
        }

        return $display;
    }

    public static function onEdit(Request $request, $id)
    {
        $user = Auth::user();
        $userCities = $user->cities;

        if(isset($id) && $user->hasRole('regionalnyy-menedzher')) {
            if(!count($userCities) || !CmsBoosterPost::where('id', $id)->whereHas('terminals', function ($terminalsQuery) use ($userCities) {
                    return $terminalsQuery->whereHas('city', function ($cityQuery) use ($userCities) {
                        return $cityQuery->whereIn('id', $userCities->pluck('id'));
                    });
                })->exists())
            {
                abort(404);
            }
        }

        $form = parent::onEdit($request, $id); // TODO: Change the autogenerated stub

        $leftColumn = $form->getColumns()[0];
        $leftColumnFields = $leftColumn->getFields();
        unset($leftColumnFields['0.05']);

        $newsRootTerm = ZeusAdminTerm::where([['type', 'category'], ['slug', 'novosti']])->first();

        $leftColumnFields['0.06'] = $leftColumnFields['0.06']->setQueryFunctionForModel(function ($q) use ($newsRootTerm) {
            return $q->whereDescendantOf($newsRootTerm);
        });

        $newFields = [
            FormField::bselect('terminals', 'Терминалы')
                ->setDataAttributes([
                    'multiple', 'data-live-search="true"'
                ])
                ->setModelForOptions(Terminal::class)
                ->setQueryFunctionForModel(function ($terminalsQuery) use ($user, $userCities) {
                    if($user->hasRole('regionalnyy-menedzher')) {
                        return $terminalsQuery->whereIn('city_id', count($userCities) ? $userCities->pluck('id') : []);
                    }

                    return $terminalsQuery;
                })
                ->setDisplay('name_with_city')
        ];

        array_splice(
            $leftColumnFields,
            6,
            0,
            $newFields
        );

        $leftColumn->setFields($leftColumnFields);

        $rightColumn = $form->getColumns()[1];
        $rightColumnFields = $rightColumn->getFields();
        $rightColumnFields['99.99'] = FormField::hidden('type')->setValue('news');
        $rightColumn->setFields($rightColumnFields);

        $form->setColumns([
            $leftColumn,
            $rightColumn
        ]);

        return $form;
    }

    public static function onCreate(Request $request = null, $id = null)
    {
        return self::onEdit($request, $id);
    }
}
